
[inlinecmt, // ====== Class declarations ====== //, 1] 

[class, class, 3] [id, POLYNOMIAL, 3] [{, {, 3] 
[private, private, 4] [integer, integer, 4] [id, b, 4] [;, ;, 4] 
[private, private, 5] [integer, integer, 5] [id, d, 5] [;, ;, 5] 
[integer, integer, 6] [id, array, 6] [[, [, 6] [intlit, 10, 6] [], ], 6] [;, ;, 6] 
[public, public, 7] [func, func, 7] [id, evaluate, 7] [(, (, 7] [integer, integer, 7] [id, x, 7] [), ), 7] [:, :, 7] [integer, integer, 7] [;, ;, 7] 
[}, }, 8] [;, ;, 8] 

[class, class, 10] [id, LINEAR, 10] [inherits, inherits, 10] [id, POLYNOMIAL, 10] 
[{, {, 11] 
[private, private, 12] [integer, integer, 12] [id, a, 12] [;, ;, 12] 
[private, private, 13] [integer, integer, 13] [id, b, 13] [;, ;, 13] 
[id, POLYNOMIAL, 14] [id, polynomial_obj, 14] [;, ;, 14] [inlinecmt, // object data members, 14] 

[public, public, 16] [func, func, 16] [id, evaluate, 16] [(, (, 16] [integer, integer, 16] [id, x, 16] [), ), 16] [:, :, 16] [integer, integer, 16] [;, ;, 16] 
[}, }, 17] [;, ;, 17] 



[inlinecmt, // ====== Function Definitions ====== //, 21] 

[func, func, 23] [id, POLYNOMIAL, 23] [sr, ::, 23] [id, evaluate, 23] [(, (, 23] [integer, integer, 23] [id, x, 23] [), ), 23] [:, :, 23] [integer, integer, 23] 
[{, {, 24] 
[var, var, 25] 
[{, {, 26] 
[integer, integer, 27] [id, bb, 27] [;, ;, 27] [inlinecmt, // if x = 2，then return 3;, 27] 
[}, }, 28] 
[id, bb, 29] [=, =, 29] [intlit, 1, 29] [;, ;, 29] 
[return, return, 30] [(, (, 30] [id, bb, 30] [+, +, 30] [id, x, 30] [), ), 30] [;, ;, 30] [inlinecmt, // the function has a return, 30] 
[}, }, 31] 


[func, func, 34] [id, LINEAR, 34] [sr, ::, 34] [id, evaluate, 34] [(, (, 34] [integer, integer, 34] [id, x, 34] [), ), 34] [:, :, 34] [integer, integer, 34] 
[{, {, 35] 
[var, var, 36] 
[{, {, 37] 
[integer, integer, 38] [id, bb, 38] [;, ;, 38] 
[}, }, 39] 
[id, bb, 40] [=, =, 40] [intlit, 1, 40] [;, ;, 40] 
[}, }, 41] 

[func, func, 43] [id, freefunc, 43] [(, (, 43] [integer, integer, 43] [id, x, 43] [), ), 43] [:, :, 43] [void, void, 43] [{, {, 43] 
[var, var, 44] 
[{, {, 45] 
[integer, integer, 46] [id, input, 46] [;, ;, 46] 
[}, }, 47] 
[id, input, 48] [=, =, 48] [intlit, 1, 48] [;, ;, 48] 
[write, write, 49] [(, (, 49] [id, input, 49] [+, +, 49] [id, x, 49] [), ), 49] [;, ;, 49] 
[}, }, 50] 




[inlinecmt, // ====== main ====== //, 55] 
[main, main, 56] 
[{, {, 57] 
[var, var, 58] 
[{, {, 59] 
[id, POLYNOMIAL, 60] [id, polynomial1, 60] [;, ;, 60] [inlinecmt, // Allocate memory for objects, 60] 
[id, POLYNOMIAL, 61] [id, polynomial2, 61] [;, ;, 61] 
[id, LINEAR, 62] [id, linear1, 62] [;, ;, 62] 
[integer, integer, 63] [id, a, 63] [;, ;, 63] [inlinecmt, // Allocate memory for objects, 63] 
[integer, integer, 64] [id, b, 64] [;, ;, 64] 
[integer, integer, 65] [id, c, 65] [;, ;, 65] 
[integer, integer, 66] [id, d, 66] [;, ;, 66] 
[integer, integer, 67] [id, result, 67] [;, ;, 67] 
[integer, integer, 68] [id, express_test, 68] [;, ;, 68] 
[integer, integer, 69] [id, array, 69] [[, [, 69] [intlit, 10, 69] [], ], 69] [[, [, 69] [intlit, 10, 69] [], ], 69] [;, ;, 69] [inlinecmt, // Allocate memory for arrays of basic types, 69] 
[integer, integer, 70] [id, counter, 70] [;, ;, 70] 
[integer, integer, 71] [id, read_test, 71] [;, ;, 71] 
[id, POLYNOMIAL, 72] [id, array_object, 72] [[, [, 72] [intlit, 10, 72] [], ], 72] [;, ;, 72] [inlinecmt, // Allocate memory for arrays of objects, 72] 

[}, }, 74] 
[id, polynomial1, 75] [., ., 75] [id, b, 75] [=, =, 75] [intlit, 1, 75] [;, ;, 75] [inlinecmt, // For objects, access to members of basic types, 75] 
[id, polynomial2, 76] [., ., 76] [id, d, 76] [=, =, 76] [intlit, 1, 76] [;, ;, 76] 
[id, polynomial2, 77] [., ., 77] [id, b, 77] [=, =, 77] [intlit, 1, 77] [;, ;, 77] 

[write, write, 79] [(, (, 79] [id, linear1, 79] [., ., 79] [id, polynomial_obj, 79] [., ., 79] [id, evaluate, 79] [(, (, 79] [intlit, 1, 79] [), ), 79] [), ), 79] [;, ;, 79] 

[id, polynomial1, 81] [., ., 81] [id, array, 81] [[, [, 81] [intlit, 1, 81] [], ], 81] [=, =, 81] [intlit, 9, 81] [;, ;, 81] 
[write, write, 82] [(, (, 82] [id, polynomial1, 82] [., ., 82] [id, array, 82] [[, [, 82] [intlit, 1, 82] [], ], 82] [), ), 82] [;, ;, 82] 


[write, write, 85] [(, (, 85] [id, polynomial1, 85] [., ., 85] [id, b, 85] [), ), 85] [;, ;, 85] [inlinecmt, // print 1, 85] 

[id, linear1, 87] [., ., 87] [id, polynomial_obj, 87] [., ., 87] [id, b, 87] [=, =, 87] [intlit, 2, 87] [;, ;, 87] [inlinecmt, // For objects, access to members of object types, 87] 
[id, b, 88] [=, =, 88] [id, linear1, 88] [., ., 88] [id, polynomial_obj, 88] [., ., 88] [id, b, 88] [;, ;, 88] 
[write, write, 89] [(, (, 89] [id, b, 89] [), ), 89] [;, ;, 89] [inlinecmt, // print 2, 89] 

[id, c, 91] [=, =, 91] [id, polynomial1, 91] [., ., 91] [id, b, 91] [+, +, 91] [id, polynomial2, 91] [., ., 91] [id, b, 91] [;, ;, 91] [inlinecmt, //  c = 1+1 ,expression involving an object factor referring to object members., 91] 

[id, result, 93] [=, =, 93] [id, polynomial1, 93] [., ., 93] [id, evaluate, 93] [(, (, 93] [id, c, 93] [), ), 93] [;, ;, 93] [inlinecmt, // Pass parameters as local values to the function’s code block., 93] 
[write, write, 94] [(, (, 94] [id, result, 94] [), ), 94] [;, ;, 94] [inlinecmt, //print 3                 // Upon execution of a return statement, pass the return value back to the calling function., 94] 

[id, array, 96] [[, [, 96] [intlit, 1, 96] [], ], 96] [[, [, 96] [intlit, 1, 96] [], ], 96] [=, =, 96] [intlit, 4, 96] [;, ;, 96] [inlinecmt, // For arrays of basic types (integer), access to an array’s elements., 96] 

[write, write, 98] [(, (, 98] [id, array, 98] [[, [, 98] [intlit, 1, 98] [], ], 98] [[, [, 98] [intlit, 1, 98] [], ], 98] [+, +, 98] [intlit, 1, 98] [), ), 98] [;, ;, 98] [inlinecmt, //print 5, 98] 

[id, array_object, 100] [[, [, 100] [intlit, 2, 100] [], ], 100] [., ., 100] [id, b, 100] [=, =, 100] [intlit, 5, 100] [;, ;, 100] [inlinecmt, // For arrays of objects, access to an array’s element’s data members, 100] 
[write, write, 101] [(, (, 101] [id, array_object, 101] [[, [, 101] [intlit, 2, 101] [], ], 101] [., ., 101] [id, b, 101] [), ), 101] [;, ;, 101] [inlinecmt, //print 5, 101] 

[id, express_test, 103] [=, =, 103] [intlit, 4, 103] [*, *, 103] [intlit, 3, 103] [+, +, 103] [(, (, 103] [intlit, 4, 103] [+, +, 103] [intlit, 100, 103] [), ), 103] [/, /, 103] [(, (, 103] [intlit, 1, 103] [+, +, 103] [intlit, 1, 103] [), ), 103] [-, -, 103] [intlit, 58, 103] [;, ;, 103] [inlinecmt, // Computing the value of an entire complex expression, 103] 
[write, write, 104] [(, (, 104] [id, express_test, 104] [), ), 104] [;, ;, 104] [inlinecmt, //print 6, 104] 


[read, read, 107] [(, (, 107] [id, read_test, 107] [), ), 107] [;, ;, 107] [inlinecmt, //test input 3            // Input statement, 107] 

[if, if, 109] [(, (, 109] [id, result, 109] [gt, >, 109] [intlit, 2, 109] [), ), 109] [inlinecmt, // result = 3               // if statement, branch1, 109] 
[then, then, 110] [{, {, 110] 
[write, write, 111] [(, (, 111] [id, read_test, 111] [+, +, 111] [intlit, 4, 111] [), ), 111] [;, ;, 111] [inlinecmt, //print 7, 111] 
[}, }, 112] [else, else, 112] [{, {, 112] 
[write, write, 113] [(, (, 113] [intlit, 2000, 113] [), ), 113] [;, ;, 113] 
[}, }, 114] [;, ;, 114] 

[if, if, 116] [(, (, 116] [id, result, 116] [lt, <, 116] [intlit, 2, 116] [), ), 116] [inlinecmt, // if statement, branch2, 116] 
[then, then, 117] 
[write, write, 118] [(, (, 118] [intlit, 999, 118] [), ), 118] [;, ;, 118] 
[else, else, 119] 
[write, write, 120] [(, (, 120] [id, read_test, 120] [+, +, 120] [intlit, 5, 120] [), ), 120] [;, ;, 120] [inlinecmt, //print 8, 120] 
[;, ;, 121] 

[id, counter, 123] [=, =, 123] [intlit, 9, 123] [;, ;, 123] 

[while, while, 125] [(, (, 125] [id, counter, 125] [lt, <, 125] [intlit, 11, 125] [), ), 125] [{, {, 125] [inlinecmt, // while loop, 125] 
[write, write, 126] [(, (, 126] [id, counter, 126] [), ), 126] [;, ;, 126] [inlinecmt, // print 9 10, 126] 
[id, counter, 127] [=, =, 127] [id, counter, 127] [+, +, 127] [intlit, 1, 127] [;, ;, 127] 
[}, }, 128] [;, ;, 128] 

[id, freefunc, 130] [(, (, 130] [id, counter, 130] [), ), 130] [;, ;, 130] [inlinecmt, // print 12  (count:11 + 1 = 12), free fucntion call, 130] 
[}, }, 131] 



