
[eq, ==, 1] [+, +, 1] [|, |, 1] [(, (, 1] [;, ;, 1] [if, if, 1] [public, public, 1] [read, read, 1] 
[neq, <>, 2] [-, -, 2] [&, &, 2] [), ), 2] [,, ,, 2] [then, then, 2] [private, private, 2] [write, write, 2] 
[lt, <, 3] [*, *, 3] [!, !, 3] [{, {, 3] [., ., 3] [else, else, 3] [func, func, 3] [return, return, 3] 
[gt, >, 4] [/, /, 4] [qm, ?, 4] [}, }, 4] [:, :, 4] [integer, integer, 4] [var, var, 4] [main, main, 4] 
[leq, <=, 5] [=, =, 5] [[, [, 5] [sr, ::, 5] [float, float, 5] [class, class, 5] [inherits, inherits, 5] 
[geq, >=, 6] [], ], 6] [string, string, 6] [while, while, 6] [break, break, 6] 
[void, void, 7] [continue, continue, 7] 




[return, return, 12] 
[intLit, 0, 13] 
[intLit, 1, 14] 
[intLit, 10, 15] 
[intLit, 12, 16] 
[intLit, 123, 17] 
[intLit, 12345, 18] 

[floatLit, 1.23, 20] 
[floatLit, 12.34, 21] 
[floatLit, 120.34e10, 22] 
[floatLit, 12345.6789e-123, 23] 

[id, abc, 25] 
[id, abc1, 26] 
[id, a1bc, 27] 
[id, abc_1abc, 28] 
[invalidid, _abc1_abc, 29] 

[blockcmt, /* this is a single line block comment */, 31] 

[id, this, 33] [id, is, 33] [id, a, 33] 
[id, multiple, 34] [id, line, 34] 
[id, block, 35] [id, comment, 35] 
[*, *, 36] [/, /, 36] 

[inlinecmt, // this is an inline comment, 38] 

[stringLit, "this is a string literal", 40] 