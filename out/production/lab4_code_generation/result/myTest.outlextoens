
[inlinecmt, // ====== Class declarations ====== //, 1] 

[class, class, 3] [id, POLYNOMIAL, 3] [{, {, 3] 
[private, private, 4] [integer, integer, 4] [id, b, 4] [;, ;, 4] 
[private, private, 5] [integer, integer, 5] [id, d, 5] [;, ;, 5] 
[public, public, 6] [func, func, 6] [id, evaluate, 6] [(, (, 6] [integer, integer, 6] [id, x, 6] [), ), 6] [:, :, 6] [integer, integer, 6] [;, ;, 6] 
[}, }, 7] [;, ;, 7] 

[class, class, 9] [id, LINEAR, 9] [inherits, inherits, 9] [id, POLYNOMIAL, 9] 
[{, {, 10] 
[private, private, 11] [integer, integer, 11] [id, a, 11] [;, ;, 11] 
[private, private, 12] [integer, integer, 12] [id, b, 12] [;, ;, 12] 
[id, POLYNOMIAL, 13] [id, polynomial_obj, 13] [;, ;, 13] [inlinecmt, // object data members, 13] 

[public, public, 15] [func, func, 15] [id, evaluate, 15] [(, (, 15] [integer, integer, 15] [id, x, 15] [), ), 15] [:, :, 15] [integer, integer, 15] [;, ;, 15] 
[}, }, 16] [;, ;, 16] 



[inlinecmt, // ====== Function Definitions ====== //, 20] 

[func, func, 22] [id, POLYNOMIAL, 22] [sr, ::, 22] [id, evaluate, 22] [(, (, 22] [integer, integer, 22] [id, x, 22] [), ), 22] [:, :, 22] [integer, integer, 22] 
[{, {, 23] 
[var, var, 24] 
[{, {, 25] 
[integer, integer, 26] [id, bb, 26] [;, ;, 26] [inlinecmt, // if x = 2，then return 3;, 26] 
[}, }, 27] 
[id, bb, 28] [=, =, 28] [intlit, 1, 28] [;, ;, 28] 
[return, return, 29] [(, (, 29] [id, bb, 29] [+, +, 29] [id, x, 29] [), ), 29] [;, ;, 29] [inlinecmt, // the function has a return, 29] 
[}, }, 30] 

[func, func, 32] [id, LINEAR, 32] [sr, ::, 32] [id, evaluate, 32] [(, (, 32] [integer, integer, 32] [id, x, 32] [), ), 32] [:, :, 32] [integer, integer, 32] 
[{, {, 33] 
[var, var, 34] 
[{, {, 35] 
[integer, integer, 36] [id, bb, 36] [;, ;, 36] 
[}, }, 37] 
[id, bb, 38] [=, =, 38] [intlit, 1, 38] [;, ;, 38] 
[}, }, 39] 



[inlinecmt, // ====== main ====== //, 43] 
[main, main, 44] 
[{, {, 45] 
[var, var, 46] 
[{, {, 47] 
[id, POLYNOMIAL, 48] [id, polynomial1, 48] [;, ;, 48] [inlinecmt, // Allocate memory for objects, 48] 
[id, POLYNOMIAL, 49] [id, polynomial2, 49] [;, ;, 49] 
[id, LINEAR, 50] [id, linear1, 50] [;, ;, 50] 
[integer, integer, 51] [id, a, 51] [;, ;, 51] [inlinecmt, // Allocate memory for objects, 51] 
[integer, integer, 52] [id, b, 52] [;, ;, 52] 
[integer, integer, 53] [id, c, 53] [;, ;, 53] 
[integer, integer, 54] [id, d, 54] [;, ;, 54] 
[integer, integer, 55] [id, result, 55] [;, ;, 55] 
[integer, integer, 56] [id, express_test, 56] [;, ;, 56] 
[integer, integer, 57] [id, array, 57] [[, [, 57] [intlit, 10, 57] [], ], 57] [[, [, 57] [intlit, 10, 57] [], ], 57] [;, ;, 57] [inlinecmt, // Allocate memory for arrays of basic types, 57] 
[integer, integer, 58] [id, counter, 58] [;, ;, 58] 
[integer, integer, 59] [id, read_test, 59] [;, ;, 59] 
[id, POLYNOMIAL, 60] [id, array_object, 60] [[, [, 60] [intlit, 10, 60] [], ], 60] [;, ;, 60] [inlinecmt, // Allocate memory for arrays of objects, 60] 

[}, }, 62] 
[id, polynomial1, 63] [., ., 63] [id, b, 63] [=, =, 63] [intlit, 1, 63] [;, ;, 63] [inlinecmt, // For objects, access to members of basic types, 63] 
[id, polynomial2, 64] [., ., 64] [id, d, 64] [=, =, 64] [intlit, 1, 64] [;, ;, 64] 
[id, polynomial2, 65] [., ., 65] [id, b, 65] [=, =, 65] [intlit, 1, 65] [;, ;, 65] 
[write, write, 66] [(, (, 66] [id, polynomial1, 66] [., ., 66] [id, b, 66] [), ), 66] [;, ;, 66] [inlinecmt, // print 1, 66] 

[id, linear1, 68] [., ., 68] [id, polynomial_obj, 68] [., ., 68] [id, b, 68] [=, =, 68] [intlit, 2, 68] [;, ;, 68] [inlinecmt, // For objects, access to members of object types, 68] 
[id, b, 69] [=, =, 69] [id, linear1, 69] [., ., 69] [id, polynomial_obj, 69] [., ., 69] [id, b, 69] [;, ;, 69] 
[write, write, 70] [(, (, 70] [id, b, 70] [), ), 70] [;, ;, 70] [inlinecmt, // print 2, 70] 

[id, c, 72] [=, =, 72] [id, polynomial1, 72] [., ., 72] [id, b, 72] [+, +, 72] [id, polynomial2, 72] [., ., 72] [id, b, 72] [;, ;, 72] 

[id, result, 74] [=, =, 74] [id, polynomial1, 74] [., ., 74] [id, evaluate, 74] [(, (, 74] [id, c, 74] [), ), 74] [;, ;, 74] [inlinecmt, // Pass parameters as local values to the function’s code block., 74] 
[write, write, 75] [(, (, 75] [id, result, 75] [), ), 75] [;, ;, 75] [inlinecmt, //print 3                 // Upon execution of a return statement, pass the return value back to the calling function., 75] 

[id, array, 77] [[, [, 77] [intlit, 1, 77] [], ], 77] [[, [, 77] [intlit, 1, 77] [], ], 77] [=, =, 77] [intlit, 4, 77] [;, ;, 77] [inlinecmt, // For arrays of basic types (integer), access to an array’s elements., 77] 
[write, write, 78] [(, (, 78] [id, array, 78] [[, [, 78] [intlit, 1, 78] [], ], 78] [[, [, 78] [intlit, 1, 78] [], ], 78] [), ), 78] [;, ;, 78] [inlinecmt, //print 4, 78] 

[id, array_object, 80] [[, [, 80] [intlit, 2, 80] [], ], 80] [., ., 80] [id, b, 80] [=, =, 80] [intlit, 5, 80] [;, ;, 80] [inlinecmt, // For arrays of objects, access to an array’s element’s data members, 80] 
[write, write, 81] [(, (, 81] [id, array_object, 81] [[, [, 81] [intlit, 2, 81] [], ], 81] [., ., 81] [id, b, 81] [), ), 81] [;, ;, 81] [inlinecmt, //print 5, 81] 

[id, express_test, 83] [=, =, 83] [intlit, 4, 83] [*, *, 83] [intlit, 3, 83] [+, +, 83] [(, (, 83] [intlit, 4, 83] [+, +, 83] [intlit, 100, 83] [), ), 83] [/, /, 83] [(, (, 83] [intlit, 1, 83] [+, +, 83] [intlit, 1, 83] [), ), 83] [-, -, 83] [intlit, 58, 83] [;, ;, 83] [inlinecmt, // Computing the value of an entire complex expression, 83] 
[write, write, 84] [(, (, 84] [id, express_test, 84] [), ), 84] [;, ;, 84] [inlinecmt, //print 6, 84] 


[read, read, 87] [(, (, 87] [id, read_test, 87] [), ), 87] [;, ;, 87] [inlinecmt, //test input 3            // Input statement, 87] 

[if, if, 89] [(, (, 89] [id, result, 89] [gt, >, 89] [intlit, 2, 89] [), ), 89] [inlinecmt, // result = 3               // if statement, branch1, 89] 
[then, then, 90] [{, {, 90] 
[write, write, 91] [(, (, 91] [id, read_test, 91] [+, +, 91] [intlit, 4, 91] [), ), 91] [;, ;, 91] [inlinecmt, //print 7, 91] 
[}, }, 92] [else, else, 92] [{, {, 92] 
[write, write, 93] [(, (, 93] [intlit, 2000, 93] [), ), 93] [;, ;, 93] 
[}, }, 94] [;, ;, 94] 

[if, if, 96] [(, (, 96] [id, result, 96] [lt, <, 96] [intlit, 2, 96] [), ), 96] [inlinecmt, // if statement, branch2, 96] 
[then, then, 97] [{, {, 97] 
[write, write, 98] [(, (, 98] [intlit, 999, 98] [), ), 98] [;, ;, 98] 
[}, }, 99] [else, else, 99] [{, {, 99] 
[write, write, 100] [(, (, 100] [id, read_test, 100] [+, +, 100] [intlit, 5, 100] [), ), 100] [;, ;, 100] [inlinecmt, //print 8, 100] 
[}, }, 101] [;, ;, 101] 

[id, counter, 103] [=, =, 103] [intlit, 9, 103] [;, ;, 103] 

[while, while, 105] [(, (, 105] [id, counter, 105] [lt, <, 105] [intlit, 11, 105] [), ), 105] [{, {, 105] [inlinecmt, // while loop, 105] 
[write, write, 106] [(, (, 106] [id, counter, 106] [), ), 106] [;, ;, 106] [inlinecmt, // print 9 10, 106] 
[id, counter, 107] [=, =, 107] [id, counter, 107] [+, +, 107] [intlit, 1, 107] [;, ;, 107] 
[}, }, 108] [;, ;, 108] 
[}, }, 109] 



