// ====== Class declarations ====== //
class POLYNOMIAL {
  	public func evaluate(float x) : float;  // error , not defined
  	public func testArr(integer arr[][], integer index) : integer;
  };

class LINEAR inherits POLYNOMIAL {
	private float a;
	private float b;

	public func build(float A, float B) : LINEAR;
	public func evaluate(float x) : float;
};

class QUADRATIC inherits POLYNOMIAL {
	private float a;
	private float b;
	private float c;

	public func build(float A, float B, float C) : QUADRATIC;
	//public func evaluate(float x) : float; // no define
	public func evaluate(integer x) : float; // warning, overloading
};


class CircularTest inherits AA {  // error, Circular class dependencies

};

class AA inherits BB {

};

class BB inherits CircularTest {

};



// ====== Function Definitions ====== //

func LINEAR::evaluate(float x) : float
{
  var
  {
    float result;
  }
  result = 0.0;
  result = a * x + b;
  return (result);
}

func QUADRATIC::evaluate(float x) : float
{
  var
  {
    float result;
  }
  //Using Horner's method
  result = a;
  result = result * x + b;
  result = result * x + c;
  return (result);
}


func QUADRATIC::evaluate(integer x) : float
{
  var
  {
    float result;
  }

  //result = a;   // type error
  //result = result * x + b;  // type error
  //result = result * x + c; // type error
  //return (result);
}


func LINEAR::build(float A, float B) : LINEAR
{
  var
  {
    LINEAR new_function;
  }
  new_function.a = A;
  new_function.b = B;
  return (new_function);
}

func QUADRATIC::build(float A, float B, float C) : QUADRATIC
{
  var
  {
    QUADRATIC new_function;
  }
  new_function.a = A;
  new_function.b = B;
  new_function.c = C;
  return (new_function);
}

func POLYNOMIAL::testArr(integer arr[][], integer index) : integer  // testing for dimension of param
{
     var
     {
       integer result;
     }
     result = arr[1][2]+index;
}




// ====== main ====== //
main
{
  var
  {
    aaaa linear1;
    QUADRATIC quadratic2;
    integer counter;
    float floatCounter;
    POLYNOMIAL test;
    integer arr[6]; // can modify dim to test function call
  }
  arr[floatCounter] = 0; // error, index must be integer
  arr[0][0] = 1; // error, wrong dimension

  linear1 = linear1.build(2, 3.5);  // error,need build(float,float)
  quadratic2 = quadratic2.build(-2.0, 1.0, 0.0);

  counter = 1; // integer counter
  floatCounter = 1.0;
  test.testArr(arr,0); // testing function call

  counter.ab = 0; // error, count isn't a class
  linear1.ab = 0; // error, class LINEAR doesn't have var ab

  a = 1+0.1+2;

  while(counter <= 10)
  {
    write(counter);
    evaluate(counter); // error,  param must be float
    linear1.evaluate(counter); // error, evaluate(float x)
    linear1.evaluate(floatCounter); // good
    quadratic2.evaluate(counter); // good, call overloading function evaluate(integer x)
  };
}

/*
1.   |X| global symbol table
2.   |X| class symbol table
3.1  |X| class data member
3.2  |X| function's local variable
4.1  |X| free function
4.2  |X| member function
6.1  | | undeclared member function definition
6.2  | | undefined member function declaration
8.1  | | multiply declared class
8.2  | | multiply declared free function
8.3  | | multiply declared identifier in class
8.4  | | multiply declared identifier in function
8.5  | | shadowed inherited data member
9.1  | | Overloaded free function
9.2  | | Overloaded member function
9.3  | | Overridden inherited member function
10.1 | | Type error in expression
10.2 | | Type error in assignment statement
10.3 | | Type error in return statement
11.1 | | Undeclared local variable
11.2 | | Undeclared data member
11.3 | | Undeclared member function
11.4 | | Undeclared free function
11.5 | | Undeclared class
12.1 | | Function call with wrong number of parameters
12.2 | | Function call with wrong type of parameters
13.1 | | Use of array with wrong number of dimensions
13.2 | | Array index is not an integer
13.3 | | Array parameter using wrong number of dimensions
14.1 | | Circular class dependency
15.1 | | "." operator used on non-class type
*/